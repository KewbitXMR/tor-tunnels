name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - x86_64-pc-windows-gnu
          - aarch64-linux-android
          - armv7-linux-androideabi

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install Zig
        if: ${{ !contains(matrix.target, 'android') }}
        uses: goto-bus-stop/setup-zig@v2

      - name: Install cargo-zigbuild
        if: ${{ !contains(matrix.target, 'android') }}
        run: cargo install cargo-zigbuild

      - name: Build native binary
        if: ${{ !contains(matrix.target, 'android') }}
        run: cargo zigbuild --release --target ${{ matrix.target }}

      # === ANDROID SETUP ===

      - name: Install Android NDK
        if: ${{ contains(matrix.target, 'android') }}
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
          link-to-sdk: true

      - name: Install cargo-ndk
        if: ${{ contains(matrix.target, 'android') }}
        run: cargo install cargo-ndk

      - name: Build Android binary
        if: ${{ contains(matrix.target, 'android') }}
        run: |
          arch=""
          if [[ "${{ matrix.target }}" == "aarch64-linux-android" ]]; then
            arch="arm64-v8a"
          elif [[ "${{ matrix.target }}" == "armv7-linux-androideabi" ]]; then
            arch="armeabi-v7a"
          fi
          cargo build --release --target ${{ matrix.target }}
        shell: bash

      # === PACKAGE OUTPUT ===

      - name: Package binary
        run: |
          mkdir -p output
          cd target/${{ matrix.target }}/release
          bin_name=$(basename $(find . -maxdepth 1 -type f -perm -u+x | head -n 1))
          cp "$bin_name" "../../../../output/tor-tunnel-${{ matrix.target }}"
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binary
          path: output/*

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}